with open('input.txt') as f:
    nodes = [line.strip().split()[:-1] for line in f.readlines()][2:]
    nodes = {(tuple(map(lambda x: int(x[1:]), n[0][15:].split('-')))): 
             {'size': int(n[1][:-1]), 'used': int(n[2][:-1]), 'avail': int(n[3][:-1])} for n in nodes}
    xmax, ymax = max(nodes)

def display():
    for i in range(ymax + 1):
        s = ''
        for j in range(xmax + 1):
            if i == 0 and j == 0:            s += 'E'
            elif i == 0 and j == xmax:       s += 'G'
            elif nodes[(j, i)]['size'] >100: s += '#'
            else:                            s += '.' if nodes[(j, i)]['used'] > 0 else '_'
        print(s)

# Part 1
viable = []
for a in nodes.values():
    if a['used'] == 0:
        continue
    for b in nodes.values():
        if a == b:
            continue
        if b['avail'] >= a['used']:
            viable.append((a, b))
print("Part 1: {}".format(len(viable)))

# Part 2:
display()
# The map looks like this for my input,
# we are moving the empty '_' slot around
#
# E....................................G
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# .#####################################
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ......................................
# ................._....................
# ......................................
# ......................................
# ......................................  
# find the empty '_' node
for k, v in nodes.items():
    if v['used'] == 0:
        start = k
        break
# walk around the wall to node 'G'
dist1 = start[0] + start[1] + xmax
# move G to E using the following 5 moves
# .G_ -> .G. -> .G. -> .G. -> _G. -> G_.
# ...    .._    ._.    _..    ...    ...
dist2 = (xmax - 1)*5
# return the total number of moves
print(dist1 + dist2)
